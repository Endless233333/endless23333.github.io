[{"categories":[],"content":"我习惯于隔断时间整理文件并重装电脑, 以下是我重装的过程, 用以之后方便复制粘贴, 主要参考了 archlinux wiki 和 archlinux 简明指南。 ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:0:0","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"安装部分 ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:1:0","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"无线网络连接 iwctl device list station wlan0 scan station wlan0 get-networks station wlan0 connect wifi-name exit ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:1:1","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"更新系统时间 timedatectl ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:1:2","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"分区 mkfs.ext4 /dev/nvme1n1p3 mkswap /dev/nvme1n1p2 mkfs.fat -F 32 /dev/nvme1n1p1 mount /dev/nvme1n1p3 /mnt mount --mkdir /dev/nvme1n1p1 /mnt/boot swapon /dev/nvme1n1p2 ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:1:3","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"安装 pacstrap -K /mnt base linux linux-firmware base-devel networkmanager vim vi sudo zsh zsh-completions openssh intel-ucode ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:1:4","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"基础配置 生成 fstab: genfstab -U /mnt \u003e /mnt/etc/fstab chroot: arch-chroot /mnt 写入 hostname 例如 XXX: vim /etc/hostname 编辑 hosts: vim /etc/hosts 127.0.0.1 localhost ::1 localhost 127.0.1.1 XXX.localdomain XXX 时区: ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 生成 adjtime: hwclock --systohc 改密码: passwd ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:1:5","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"语言 vim /etc/locale.gen 去掉下面两个前面的井号: en_US.UTF-8 UTF-8 zh_CN.UTF-8 UTF-8 locale-gen echo 'LANG=en_US.UTF-8' \u003e /etc/locale.conf ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:1:6","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"引导程序 bootctl --path=/boot install vim /boot/loader/loader.conf default arch.conf timeout 0 console-mode keep editor no cat /etc/fstab vim /boot/loader/entries/arch.conf title Arch Linux linux /vmlinuz-linux initrd /initramfs-linux.img options root=UUID=... rw ibt=off nowatchdog ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:1:7","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"基础安装结束 exit umount -R /mnt reboot ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:1:8","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"后续安装 useradd -m -G wheel -s /bin/bash endless passwd endless EDITOR=vim visudo 去掉 #%wheel ALL=(ALL:ALL) ALL 前的井号 vim /etc/pacman.conf 去掉 [multilib] 对应两行前的井号 systemctl enable --now NetworkManager.service pacman -Syyu pacman -S xfce4 xfce4-goodies lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings \\ sof-firmware alsa-firmware alsa-ucm-conf pavucontrol pulseaudio pulseaudio-alsa pulseaudio-bluetooth \\ adobe-source-han-serif-cn-fonts wqy-zenhei noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra \\ network-manager-applet nm-connection-editor \\ mesa lib32-mesa vulkan-intel lib32-vulkan-intel \\ blueman bluez bluez-utils \\ gvfs gvfs-mtp udiskie \\ fcitx5-im fcitx5-chinese-addons fcitx5-material-color fcitx5-pinyin-zhwiki fcitx5-configtool \\ firefox flameshot syncthing \\ fd fzf mtr p7zip ntfs-3g scrcpy tmux bat bottom neofetch ripgrep tldr wget tree zip \\ git pacman -S gimp libreoffice-still chromium man-db man-pages obs-studio okular \\ docker docker-compose jdk-openjdk jdk17-openjdk jdk11-openjdk jdk8-openjdk hugo wireshark-qt php linux-headers systemctl enable lightdm.service systemctl enable bluetooth.service systemctl enable systemd-boot-update.service git clone https://aur.archlinux.org/yay-bin.git cd yay-bin makepkg -si yay -S yay-bin ttf-intel-one-mono drawio-desktop-bin visual-studio-code-bin vmware-workstation mycli goldendict-ng ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:1:9","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"配置部分 ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:2:0","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"docker sudo usermod -aG docker endless ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:2:1","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"wireshark sudo usermod -a -G wireshark $USER ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:2:2","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"VMware sudo systemctl start vmware-networks-configuration.service sudo systemctl enable vmware-networks.service vmware-usbarbitrator.service modprobe -a vmw_vmci vmmon MC60H-DWHD5-H80U9-6V85M-8280D ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:2:3","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"firefox about:config browser.newtabpage.activity-stream.improvesearch.handoffToAwesomebar ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:2:4","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"fcitx5 vim /etc/environment GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx XMODIFIERS=@im=fcitx SDL_IM_MODULE=fcitx GLFW_IM_MODULE=ibus Input Method 加上 pinyin Addons 的 Classic User Interface 中的 Theme 改成 Material-Color-Red ","date":"2024-02-02","objectID":"/archlinux_quick_reinstall/:2:5","tags":["archlinux","linux"],"title":"我的 archlinux 快速重装与配置","uri":"/archlinux_quick_reinstall/"},{"categories":[],"content":"在过去, 我经常使用 python -m http.server 用来在局域网中给别人分享一些文件, 所以我打算去翻翻自己电脑上安装的各种 python 包, 找一找能直接通过 python -m 使用的有用的模块。 ","date":"2024-01-06","objectID":"/python_cli/:0:0","tags":["python","linux"],"title":"通过 python -m 直接在命令行中使用 python 模块以实现一些有用的功能","uri":"/python_cli/"},{"categories":[],"content":"python -m 在 python 的文档中可以看到, python -m \u003cmodule-name\u003e 会在 sys.path 中搜索指定模块, 并以 __main__ 模块执行其内容。 以 __main__ 模块执行其内容有两种情况: 如果是单独的 py 文件, 可以通过 __name__ == '__main__', 一般是 if __name__ == '__main__': 如果是一个包, 执行其下的 __main__.py 因此只需要在 sys.path 中找到包含 __main__.py 这个文件的目录或者内容中有 if __name__ == '__main__': 的文件即可。 ","date":"2024-01-06","objectID":"/python_cli/:1:0","tags":["python","linux"],"title":"通过 python -m 直接在命令行中使用 python 模块以实现一些有用的功能","uri":"/python_cli/"},{"categories":[],"content":"寻找 我电脑上的 python 包都在 /usr/lib/python3.11, cd 到此目录。 使用 find . -name \"__main__.py\" 寻找 __main__.py. 使用 rg -l \"if __name__ == '__main__':\" | sort 寻找内容中有 if __name__ == '__main__': 的文件。 ","date":"2024-01-06","objectID":"/python_cli/:2:0","tags":["python","linux"],"title":"通过 python -m 直接在命令行中使用 python 模块以实现一些有用的功能","uri":"/python_cli/"},{"categories":[],"content":"筛选与使用 /usr/lib/python3.11 下的 site-packages 存放第三方模块。 一般可以通过 python -m xxx -h 或 python -m xxx --help 获取帮助信息。 ","date":"2024-01-06","objectID":"/python_cli/:3:0","tags":["python","linux"],"title":"通过 python -m 直接在命令行中使用 python 模块以实现一些有用的功能","uri":"/python_cli/"},{"categories":[],"content":"标准库 ast 解析源代码成抽象语法树, 例如: \u003e echo \"print('hello')\" | python -m ast Module( body=[ Expr( value=Call( func=Name(id='print', ctx=Load()), args=[ Constant(value='hello')], keywords=[]))], type_ignores=[]) base64 用于 base64 编解码, 例如: \u003e echo -n \"hello\" | python -m base64 aGVsbG8= \u003e echo -n \"aGVsbG8=\" | python -m base64 -d hello% 由于 coreutils 里就有 base64, 所以直接在命令行使用这个模块意义不大。 compileall 可以将 .py 编译为 .pyc, 例如: python -m compileall .. 默认 .pyc 会放在 __pycache__ 目录下。 cProfile 性能分析, 例如: python -m cProfile -m base64 ./1.txt. curses 用于创建 TUI 的模块。 python -m curses.has_key 检查 has_key. python -m curses.textpad 打开一个简单的写字板。 ensurepip 用于确保安装了 pip, 没什么用。 gzip 例如: python -m gzip --best ./test.mp4 http.server 起一个简单的 http 服务。 imghdr 确认图像类型, 例如: \u003e python -m imghdr ./Pictures/7.png ./Pictures/7.png: png json.tool 校验并打印好看的 json, 例如: python -m json.tool ~/data.json. lib2to3 用于将 python2 代码转化成 python3 代码, 可以直接 2to3 而不用 python -m lib2to3, 也没什么用。 mimetypes 显示文件的 mime 类型, 例如: \u003e python -m mimetypes 1.sh type: application/x-sh encoding: None pdb python debugger, 用法: python -m pdb your_script.py. platform 获取平台信息: \u003e python -m platform Linux-6.6.9-arch1-1-x86_64-with-glibc2.38 profile 性能分析, 例如: \u003e python -m profile 1.py hello 5 function calls in 0.013 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.000 0.000 1.py:1(\u003cmodule\u003e) 1 0.000 0.000 0.000 0.000 :0(exec) 1 0.000 0.000 0.000 0.000 :0(print) 1 0.013 0.013 0.013 0.013 :0(setprofile) 1 0.000 0.000 0.013 0.013 profile:0(\u003ccode object \u003cmodule\u003e at 0x7f373a01e5d0, file \"1.py\", line 1\u003e) 0 0.000 0.000 profile:0(profiler) 选项 -o 可以保存分析结果到指定文件。 pstats 处理和显示 profile 的结果, 例如: \u003e python -m pstats test Welcome to the profile statistics browser. test% pydoc python 文档工具。 quopri python -m quopri xxx 对 xxx 进行 Quoted-Printable 编码, 选项 -d 解码。 random python -m random 测试产生随机数。 shlex 分词, 例如: \u003e echo -n \"print('hello')\" | python -m shlex Token: 'print' Token: '(' Token: \"'hello'\" Token: ')' site python -m site 打印 sys.path 等信息。 sysconfig python -m sysconfig 打印配置信息。 tabnanny 检查缩进, 例如: \u003e python -m tabnanny -v 1.py '1.py': Clean bill of health. tarfile 创建和解压 tar 文件, 例如: \u003e touch 1 \u003e ls 1 \u003e python -m tarfile -c 1.tar ./1 \u003e ls 1 1.tar \u003e python -m tarfile -l 1.tar ./1 \u003e python -m tarfile -t 1.tar [\u003cTarInfo './1' at 0x7f9cc5ae5cc0\u003e] \u003e rm 1 \u003e ls 1.tar \u003e python -m tarfile -e 1.tar \u003e ls 1 1.tar tkinter 用于创建 GUI 的模块, 直接 python -m tkinter 的话会有一个简单的小窗口。 turtledemo 正如它的名字一样, 直接使用会出现 turtle 的 demo. unittest 用于在命令行中直接运行单元测试。 uu 进行 uu 编码和解码。 venv 创建虚拟环境: python -m venv aaa 激活虚拟环境: source aaa/bin/activate 退除虚拟环境: deactivate xmlrpc.server python -m xmlrpc.server 起一个简单的 xmlrpc 服务。 zipapp 创建和执行 pyz. 创建: python -m zipapp -o 1.pyz -m \"myapp:main\" ./app 执行: python 1.pyz 在已存在 __main__.py 的目录中不可以使用 -m 选项指定入口点。 ","date":"2024-01-06","objectID":"/python_cli/:3:1","tags":["python","linux"],"title":"通过 python -m 直接在命令行中使用 python 模块以实现一些有用的功能","uri":"/python_cli/"},{"categories":[],"content":"在 zshparam(1) 中可以看到 zsh 的各种提示符可以通过修改 PROMPT, PROMPT2, PROMPT3, PROMPT4, RPROMPT 等变量的值进行设置, 它们的基本语法相同, 其中 PROMPT 是主要的提示符, 本文也以它为例。 ","date":"2024-01-05","objectID":"/zsh_prompt/:0:0","tags":["zsh"],"title":"zsh 提示符","uri":"/zsh_prompt/"},{"categories":[],"content":"zsh PROMPT 转义字符 zshparam(1) 中关于 PS1 的说明 (zsh 中 PROMPT, prompt, PS1 等价) 指向了 zshmisc(1)。 在 zshmisc(1) 的 SIMPLE PROMPT ESCAPES 一节中可以看到到所有的转义字符，以下列出一些我认为有用的: 登陆信息: %M: 完整的主机名 %n: 用户名 Shell 状态: %#: 特权模式下是一个井号否则是一个百分号 %?: 上一个命令的返回状态 %d 或 %/: 当前目录 %~: 当前目录，若以 $HOME 起始，则将之替换为一个波浪号 %j: 作业数 时间和日期: %D: 年-月-日 %T: 时:分 %*: 时:分:秒 样式: %B (%b): 开始 (结束) 粗体 %F{red} (%f): 开始 (结束) 颜色 条件子串: %(x.true-text.false-text): x 为条件, true-text 为条件为真时显示的内容, false-text 为条件为假时显示的内容。x 有特定的选择, 当 x 为 ? 时，表示上一个命令的返回状态, 默认 0 为真, 其他为假。 ","date":"2024-01-05","objectID":"/zsh_prompt/:1:0","tags":["zsh"],"title":"zsh 提示符","uri":"/zsh_prompt/"},{"categories":[],"content":"git 当前分支名 在 PRO Git 的 Git in Zsh 一节中可以看到一个在右侧显示分支名的实例: autoload -Uz vcs_info precmd_vcs_info() { vcs_info } precmd_functions+=( precmd_vcs_info ) setopt prompt_subst RPROMPT='${vcs_info_msg_0_}' # PROMPT='${vcs_info_msg_0_}%# ' zstyle ':vcs_info:git:*' formats '%b' 在 zstyle ':vcs_info:git:*' formats '%b' 一句中 '%b' 指定了显示的样式，%b 表示分支名。 ","date":"2024-01-05","objectID":"/zsh_prompt/:2:0","tags":["zsh"],"title":"zsh 提示符","uri":"/zsh_prompt/"},{"categories":[],"content":"我的 PROMPT 配置 推荐一个网站 zsh-prompt-generator 用于生成简单的 PROMPT。 首先我希望提示符分为两行，这只需要加一个换行即可: export PROMPT='┌── └' ┌── └ 在第一行中显示当前的时间和当前目录: export PROMPT='┌──(%T)─[%~] └' ┌──(20:00)─[~] └ 在第二行中, 若上一个命令的返回状态不为 0 则显示此返回状态, 否则按照 %# 显示: export PROMPT='┌──(%T)─[%~] └(%(?.%#.%?))─' ┌──(20:00)─[~] └(%)─false ┌──(20:00)─[~] └(1)─ 在第二行显示当前分支名: autoload -Uz vcs_info precmd_vcs_info() { vcs_info } precmd_functions+=( precmd_vcs_info ) setopt prompt_subst zstyle ':vcs_info:git:*' formats '[%b]─' export PROMPT='┌──(%T)─[%~] └(%(?.%#.%?))─${vcs_info_msg_0_}' ┌──(21:27)─[~/git-test] └(%)─[master]─ 最后设置一下颜色: autoload -Uz vcs_info precmd_vcs_info() { vcs_info } precmd_functions+=( precmd_vcs_info ) setopt prompt_subst zstyle ':vcs_info:git:*' formats '%F{10}[%f%b%F{10}]─%f' export PROMPT='%F{10}┌──(%f%F{11}%T%f%F{10})─[%f%F{15}%~%f%F{10}] └(%f%(?.%F{14}%#%f.%F{9}%?%f)%F{10})─%f${vcs_info_msg_0_}' ","date":"2024-01-05","objectID":"/zsh_prompt/:3:0","tags":["zsh"],"title":"zsh 提示符","uri":"/zsh_prompt/"}]
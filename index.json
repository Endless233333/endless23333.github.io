[{"categories":[],"content":"使用预编译语句 (Prepared Statements) 将编译好的语句存储在数据库, 需要使用时传递参数即可, 可以提高查询性能并防止 SQL 注入。 ","date":"2024-06-08","objectID":"/sql-prepared-statement/:0:0","tags":[],"title":"SQL 预编译语句的使用与局限","uri":"/sql-prepared-statement/"},{"categories":[],"content":"使用 使用 mysql8.4.0, 表如下: CREATE TABLE users ( id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(50) NOT NULL, password VARCHAR(50) NOT NULL ); ","date":"2024-06-08","objectID":"/sql-prepared-statement/:1:0","tags":[],"title":"SQL 预编译语句的使用与局限","uri":"/sql-prepared-statement/"},{"categories":[],"content":"直接在 mysql 中 创建预编译语句: PREPARE stmt FROM 'SELECT * FROM users WHERE id = ?'; 设置参数: SET @user_id = 1; 执行: EXECUTE stmt USING @user_id; 执行结果: +----+----------+-------------+ | id | username | password | +----+----------+-------------+ | 1 | admin | password123 | +----+----------+-------------+ ","date":"2024-06-08","objectID":"/sql-prepared-statement/:1:1","tags":[],"title":"SQL 预编译语句的使用与局限","uri":"/sql-prepared-statement/"},{"categories":[],"content":"python + mysql-connector from mysql import connector # 获取连接 connection = connector.connect( host=\"172.17.0.2\", port=\"3306\", user=\"root\", password=\"123456\", database=\"test\", ) # 获取游标, \"prepared=True\" 用于开启预编译 cursor = connection.cursor(prepared=True) # 编写语句, 其中 \"%s\" 与 python 中格式化字符串的 \"%s\" 不同, 仅表示此处需要一个参数, 可以用 \"?\" 代替 sql = \"select * from users where id = %s\" # 执行 cursor.execute(sql, (1,)) print(cursor.fetchall()) 执行结果: [(1, 'admin', 'password123')] ","date":"2024-06-08","objectID":"/sql-prepared-statement/:1:2","tags":[],"title":"SQL 预编译语句的使用与局限","uri":"/sql-prepared-statement/"},{"categories":[],"content":"java + jdbc // ... // 获取连接 Connection conn = JDBCUtil.getConnection(); // # 编写语句 String sql = \"select * from users where id = ?\"; // 预编译 PreparedStatement pstam = conn.prepareStatement(sql); // 设置参数 pstam.setInt(1, 1); // 执行 int num = pstam.executeSelect(); // ... ","date":"2024-06-08","objectID":"/sql-prepared-statement/:1:3","tags":[],"title":"SQL 预编译语句的使用与局限","uri":"/sql-prepared-statement/"},{"categories":[],"content":"局限 预编译语句不能将表名或者列名设置为参数。 将表名设置为参数会报错: \u003e PREPARE stmt FROM 'SELECT * FROM ? WHERE id = 1'; (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '? WHERE id = 1' at line 1\") 将列名设置为参数无法得到结果: \u003e PREPARE stmt FROM 'SELECT * FROM users WHERE ? = 1'; \u003e SET @p1 = 'id'; \u003e EXECUTE stmt USING @p1; +----+----------+----------+ | id | username | password | +----+----------+----------+ +----+----------+----------+ ","date":"2024-06-08","objectID":"/sql-prepared-statement/:2:0","tags":[],"title":"SQL 预编译语句的使用与局限","uri":"/sql-prepared-statement/"},{"categories":[],"content":"本文记录了我在我的 Archlinux 上通过 ReDroid 容器运行明日方舟并使用 MAA 进行自动刷图。 ","date":"2024-05-31","objectID":"/archlinux-arknights-maa/:0:0","tags":["archlinux","docker","game"],"title":"在 Archlinux 上通过 ReDroid 容器运行明日方舟并使用 MAA 自动刷图","uri":"/archlinux-arknights-maa/"},{"categories":[],"content":"所需包的安装 sudo pacman -S linux-zen docker scrcpy linux-zen: 启用了 binderfs 模块供 ReDroid 使用 docker: 用于运行 ReDroid 容器 scrcpy: 显示并控制安卓设备, 它依赖的 android-tools 中的 adb 也是要用到的 ","date":"2024-05-31","objectID":"/archlinux-arknights-maa/:1:0","tags":["archlinux","docker","game"],"title":"在 Archlinux 上通过 ReDroid 容器运行明日方舟并使用 MAA 自动刷图","uri":"/archlinux-arknights-maa/"},{"categories":[],"content":"相关配置 ","date":"2024-05-31","objectID":"/archlinux-arknights-maa/:2:0","tags":["archlinux","docker","game"],"title":"在 Archlinux 上通过 ReDroid 容器运行明日方舟并使用 MAA 自动刷图","uri":"/archlinux-arknights-maa/"},{"categories":[],"content":"linux-zen 由于我使用的 bootloader 是 systemd-boot, 所以只需要在 /boot/loader/entries 中新建一个 arch-zen.conf 并写入以下内容: title Arch Linux-zen linux /vmlinuz-linux-zen initrd /intel-ucode.img initrd /initramfs-linux-zen.img options root=UUID=... rw ibt=off nowatchdog 其中 UUID 的值是根分区的 UUID. 重启后不断按 ↓ 键选择 Arch Linux-zen 后启动即可, 想要默认使用此项可以将 /boot/loader/loader.conf 中 default 的值改为 arch-zen.conf. ","date":"2024-05-31","objectID":"/archlinux-arknights-maa/:2:1","tags":["archlinux","docker","game"],"title":"在 Archlinux 上通过 ReDroid 容器运行明日方舟并使用 MAA 自动刷图","uri":"/archlinux-arknights-maa/"},{"categories":[],"content":"docker 将当前用户加入 docker 组: sudo usermod -aG docker $USER 这样在使用 docker 命令是就不需要加上 sudo. 使用 sudo systemctl start docker 启动 docker 服务, 或者使用 sudo systemctl enable --now docker 启动 docker 并设置为开机自启。 ","date":"2024-05-31","objectID":"/archlinux-arknights-maa/:2:2","tags":["archlinux","docker","game"],"title":"在 Archlinux 上通过 ReDroid 容器运行明日方舟并使用 MAA 自动刷图","uri":"/archlinux-arknights-maa/"},{"categories":[],"content":"ReDroid 容器的启动 使用以下命令启动 ReDroid 容器: docker run -d --privileged \\ -v ~/redroid11:/data \\ -p 5555:5555 \\ --name redroid11 \\ redroid/redroid:11.0.0-latest \\ androidboot.redroid_width=1280 \\ androidboot.redroid_height=720 \\ androidboot.redroid_gpu_mode=host \\ androidboot.use_memfd=1 第一次启动需要下载 ReDroid 镜像, 需要等待一定时间。 第一次成功启动之后再次启动可以使用 docker start redroid11. 使用 docker stop redroid11 关闭该容器。 ","date":"2024-05-31","objectID":"/archlinux-arknights-maa/:3:0","tags":["archlinux","docker","game"],"title":"在 Archlinux 上通过 ReDroid 容器运行明日方舟并使用 MAA 自动刷图","uri":"/archlinux-arknights-maa/"},{"categories":[],"content":"adb 和 scrcpy 的连接和明日方舟的安装 使用 adb connect localhost:5555 连接至 ReDroid 容器。 使用 scrcpy -s localhost:5555 --no-audio 获取容器的屏幕并进行操控。 在明日方舟的官网下载明日方舟的安卓版安装包之后, 使用 adb -s localhost:5555 install ~/Downloads/arknights-... 安装明日方舟。 安装完成后在 scrcpy 的窗口中下滑就可以看见, 启动并下载资源后登陆。 ","date":"2024-05-31","objectID":"/archlinux-arknights-maa/:4:0","tags":["archlinux","docker","game"],"title":"在 Archlinux 上通过 ReDroid 容器运行明日方舟并使用 MAA 自动刷图","uri":"/archlinux-arknights-maa/"},{"categories":[],"content":"MAA 的配置与使用 在 MAA 的 github releases 中下载最新版的 MAA (例如 2024-05-31 最新版是 v5.3.1, 所以下载 MAA-v5.3.1-linux-x86_64.tar.gz 这个文件). tar -xf 解压后进入 Python 目录, 其中的 smaple.py 是要运行的 python 文件, 将其中的 if asst.connect('adb.exe', '127.0.0.1:5555'): 改成 if asst.connect('adb', '127.0.0.1:5555'):. 在我的使用中发现直接 python smaple.py 会卡住, 通过调试发现是卡在 asst/updater.py 中 Updater 的 __init__ 中获取 MAA 当前版本的地方。 将 asst/updater.py 中的 self.cur_version = q.get() 改成 self.cur_version = \"v5.3.1\" 即可, 具体的值用下载到的版本, 并将以下内容注释掉: q = queues.Queue(1, ctx=multiprocessing) p = Process(target=self._get_cur_version, args=(path, q,)) p.start() p.join() 使用 python smaple.py 即可正常启动, 其中的具体配置参见 MAA 集成文档。 之后便可以开始愉快的挂机了。 ","date":"2024-05-31","objectID":"/archlinux-arknights-maa/:5:0","tags":["archlinux","docker","game"],"title":"在 Archlinux 上通过 ReDroid 容器运行明日方舟并使用 MAA 自动刷图","uri":"/archlinux-arknights-maa/"},{"categories":[],"content":"参考 MAA 用户手册 ReDroid+MAA：在Linux下游玩明日方舟 使用 redroid 玩耍 Arknights ","date":"2024-05-31","objectID":"/archlinux-arknights-maa/:6:0","tags":["archlinux","docker","game"],"title":"在 Archlinux 上通过 ReDroid 容器运行明日方舟并使用 MAA 自动刷图","uri":"/archlinux-arknights-maa/"},{"categories":[],"content":"在使用 docker pull 下载镜像时, 有时会遇到下载很慢的情况, 除了设置其他的镜像源外, 还可以使用代理的方式。但是在使用过程中发现 docker pull 时并不经过系统代理或其他常见设置下指定的代理服务器, 在参考了 Configure the daemon with systemd 后得到以下两种解决办法。 ","date":"2024-05-29","objectID":"/%E4%B8%BA-docker-pull-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/:0:0","tags":["docker"],"title":"为 Docker Pull 设置代理服务器","uri":"/%E4%B8%BA-docker-pull-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":[],"content":"docker.service 使用 sudo vim /usr/lib/systemd/system/docker.service 或者 sudo systemctl edit docker.service 编辑 docker.service 在 [Service] 下加入以下内容: Environment=\"HTTP_PROXY=http://127.0.0.1:12345\" Environment=\"HTTPS_PROXY=http://127.0.0.1:12345\" 之后使用 sudo systemctl restart docker 重启 docker 即可。 注意在使用 systemctl edit 时, 原有的内容前会被加上井号, 不用在意, 新加的内容不需要加井号。 ","date":"2024-05-29","objectID":"/%E4%B8%BA-docker-pull-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/:1:0","tags":["docker"],"title":"为 Docker Pull 设置代理服务器","uri":"/%E4%B8%BA-docker-pull-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":[],"content":"daemon.json 在 /etc/docker/daemon.json 中写入以下内容: { \"proxies\": { \"http-proxy\": \"http://127.0.0.1:12345\", \"https-proxy\": \"http://127.0.0.1:12345\" } } 之后使用 sudo systemctl restart docker 重启 docker 即可。 ","date":"2024-05-29","objectID":"/%E4%B8%BA-docker-pull-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/:2:0","tags":["docker"],"title":"为 Docker Pull 设置代理服务器","uri":"/%E4%B8%BA-docker-pull-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":[],"content":"Linux 上的访问控制列表 (acl, access control list) 为文件系统提供了一种额外的、更灵活的权限机制。相比于使用 chmod 修改文件的模式比特位以进行访问控制, acl 可以指定具体的某个用户或者某个组对文件的访问权限。 ","date":"2024-05-28","objectID":"/linux_%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8/:0:0","tags":["linux"],"title":"Linux 上的访问控制列表","uri":"/linux_%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8/"},{"categories":[],"content":"安装和启用 acl 在 Archlinux 和 CentOS 中 acl 包是默认安装的, Debian 中需要: sudo apt install acl. acl 包中的 getfacl:用于显示文件的 acl, setfacl:用于设置文件的 acl. 在大部分的文件系统中(ext2/3/4, xfs, btrfs…), acl 都是默认启用的。 如果当前系统系统未启用 acl, 除了使用对应的文件系统管理工具设置 acl 参数外, 还可以在 /etc/fstab:挂载选项中加上 acl 参数, 例如: UUID=... / ext4 rw,relatime,acl 0 1. ","date":"2024-05-28","objectID":"/linux_%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8/:1:0","tags":["linux"],"title":"Linux 上的访问控制列表","uri":"/linux_%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8/"},{"categories":[],"content":"acl 的使用 ","date":"2024-05-28","objectID":"/linux_%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8/:2:0","tags":["linux"],"title":"Linux 上的访问控制列表","uri":"/linux_%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8/"},{"categories":[],"content":"getfacl 显示 acl getfacl [-aceEsRLPtpndvh] file ... -a, --access: 仅显示文件的访问控制列表 -d, --default: 仅显示默认的访问控制列表 -c, --omit-header: 不现实头部注释 -e, --all-effective: 打印所有有效全线 -E, --no-effective: 打印无效权限 -s, --skip-base: 跳过仅有基本项的文件 -R, --recursive: 递归 -L, --logical: 跟踪符号链接 -P, --physical: 不跟踪符号链接 -t, --tabular: 使用表格的形式打印 -n, --numeric: 打印用户/组标识符 --one-file-system: 跳过不同文件系统的文件 -p, --absolute-names: 不去除路径名中前导的’/' -v, --version: 版本 -h, --help: 帮助 一般只需要 getfacl file 显示 acl, 若要查看目录中所有文件的 acl 可以使用 getfacl -Rs dir. acl 中的基本条目与 ugo/rwx 相对应, 不可删除, 形如: user::rw- group::r-- other::r-- ","date":"2024-05-28","objectID":"/linux_%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8/:2:1","tags":["linux"],"title":"Linux 上的访问控制列表","uri":"/linux_%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8/"},{"categories":[],"content":"setfacl 设置 acl setfacl [-bkndRLP] { -m|-M|-x|-X ... } file ... -m, --modify=acl: 修改文件当前的 acl 条目 -M, --modify-file=file: 从文件中读取要修改的 acl 条目 -x, --remove=acl: 删除文件指定的 acl 条目 -X, --remove-file=file: 从文件中读取要删除的 acl 条目 -b, --remove-all: 删除所有扩展的 acl 条目 -k, --remove-default: 删除默认的 acl --set=acl: 设置并替换文件的 acl, 替换当前的 acl --set-file=file: 从文件中读取要设置的 acl 条目 --mask: 请重新计算有效的权限掩码 -n, --no-mask: 不要重新计算有效的权限掩码 -d, --default: 操作应用于默认 acl -R, --recursive: 递归 -L, --logical: 跟踪符号链接 -P, --physical: 不跟踪符号链接 --restore=file: 恢复 acl (与 “getfacl-R” 相反) --test: 测试模式 (不修改 acl) -v, --version: 版本 -h, --help: 帮助 为用户设置 acl: setfacl -m \"u:user:permissions\" \u003cfile/dir\u003e 为组设置 acl: setfacl -m \"g:group:permissions\" \u003cfile/dir\u003e 为其他人设置 acl: setfacl -m \"other:permissions\" \u003cfile/dir\u003e 其中 user/group 可以是用户名/组名或 ID, permissions 是形如 r-x 的权限。 整个形如 \"u:user:permissions\" 称为一个条目 (entry). 为指定目录下的新创建的文件或目录设置默认的条目: setfacl -dm \"entry\" \u003cdir\u003e, 默认的条目不会影响移动到目录中的文件。 删除默认条目: setfacl -k \u003cfile/dir\u003e. 删除所有扩展的条目: setfacl -b \u003cfile/dir\u003e. ","date":"2024-05-28","objectID":"/linux_%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8/:2:2","tags":["linux"],"title":"Linux 上的访问控制列表","uri":"/linux_%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8/"},{"categories":[],"content":"本文记录了我又双叒叕重装 archlinux 的过程和一些常用软件, 主要参考 ArchWiki 和 archlinux 简明指南。 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:0:0","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"安装 进入安装环境的过程略过。 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:0","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"联网 有线网络一般能自动联网, 无线网络使用 iwctl 进行连接: iwctl device list station wlan0 scan station wlan0 get-networks station wlan0 connect wifi-name exit 可以使用 ping 检查网络连接。 联网之后可以通过 passwd 设置安装环境中 root 的密码, 然后通过其他机器 ssh 去连, 方便复制粘贴。 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:1","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"更新系统时间 使用 timedatectl 确保系统时间是准确的。 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:2","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"硬盘分区、格式化、挂载 由于是重装, 所以硬盘不需要重新分区, 最终分区如下: Device Start End Sectors Size Type /dev/nvme0n1p1 2048 1050623 1048576 512M EFI System /dev/nvme0n1p2 1050624 34605055 33554432 16G Linux swap /dev/nvme0n1p3 34605056 1953523711 1918918656 915G Linux filesystem 格式化: mkfs.ext4 /dev/nvme0n1p3 mkswap /dev/nvme0n1p2 mkfs.fat -F 32 /dev/nvme0n1p1 按如下顺序挂载: mount /dev/nvme0n1p3 /mnt mount --mkdir /dev/nvme0n1p1 /mnt/boot swapon /dev/nvme0n1p2 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:3","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"安装系统和必要的功能性软件 pacstrap -K /mnt base linux linux-firmware base-devel networkmanager vim sudo openssh zsh intel-ucode ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:4","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"生成 fstab 文件 genfstab -U /mnt \u003e /mnt/etc/fstab ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:5","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"change root 使用 arch-chroot /mnt 把系统环境切换到新系统下。 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:6","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"设置时区 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:7","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"设置主机名 在 /etc/hostname 中写入主机名, 例如 myarch. 在 vim /etc/hosts 中写入以下内容: 127.0.0.1 localhost ::1 localhost 127.0.1.1 myarch.localdomain myarch ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:8","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"硬件时间设置 hwclock --systohc ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:9","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"设置 Locale 编辑 /etc/locale.gen, 去掉 en_US.UTF-8 UTF-8 和 zh_CN.UTF-8 UTF-8 前的井号。 然后使用 locale-gen 生成 locale. echo 'LANG=en_US.UTF-8' \u003e /etc/locale.conf 设定 LANG 变量。 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:10","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"设置 root 用户密码 passwd ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:11","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"安装引导程序 安装 systemd-boot: bootctl --path=/boot install 编辑 /boot/loader/loader.conf 配置启动选单: default arch.conf timeout 0 console-mode keep editor no 使用 cat /etc/fstab 查看根分区的 UUID. 编辑 /boot/loader/entries/arch.conf 增加启动选项: title Arch Linux linux /vmlinuz-linux initrd /intel-ucode.img initrd /initramfs-linux.img options root=UUID=... rw ibt=off nowatchdog root=UUID= 后接跟分区的 UUID. ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:12","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"准备非 root 用户 创建用户: useradd -m -G wheel -s /bin/bash XXX 设置密码: passwd XXX 编辑 sudoers: EDITOR=vim visudo 去掉 #%wheel ALL=(ALL:ALL) ALL 前的井号。 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:13","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"重启 exit umount -R /mnt reboot ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:14","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"联网 systemctl enable --now NetworkManager nmcli device wifi connect 名 password 密 联网后可以通过 systemctl start sshd 开启 ssh 服务。 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:15","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"开启 32 位支持库 编辑 /etc/pacman.conf 去掉 [multilib] 及其下一行前的井号。 pacman -Syyu 更新一下。 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:16","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"一大波安装 # zsh 插件 pacman -S zsh-autosuggestions zsh-completions zsh-history-substring-search zsh-syntax-highlighting # xfce4 桌面相关 pacman -S xfce4 xfce4-goodies lightdm lightdm-gtk-greeter gvfs gvfs-mtp udiskie sof-firmware alsa-firmware alsa-ucm-conf pavucontrol pulseaudio pulseaudio-alsa pulseaudio-bluetooth network-manager-applet nm-connection-editor # 字体 pacman -S adobe-source-han-serif-cn-fonts wqy-zenhei noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra # intel 核显驱动 pacman -S mesa lib32-mesa vulkan-intel lib32-vulkan-intel # 蓝牙 pacman -S blueman bluez bluez-utils # 输入法 pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-material-color fcitx5-pinyin-zhwiki fcitx5-configtool # 常用软件 pacman -S firefox flameshot man-db man-pages syncthing fd fzf git ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:17","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"yay 安装 使用非 root 用户: git clone https://aur.archlinux.org/yay-bin.git pacman -R yay-bin cd yay-bin makepkg -si 常用软件: yay -S clash-verge-rev-bin ttf-intel-one-mono visual-studio-code-bin ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:18","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"启动一些服务 systemctl enable lightdm.service bluetooth.service systemd-boot-update.service ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:19","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"fcitx5 配置 编辑 /etc/environment 加入以下内容: GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx XMODIFIERS=@im=fcitx SDL_IM_MODULE=fcitx GLFW_IM_MODULE=ibus fcitx5 设置的 Input Method 加上 pinyin. ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:20","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"完成安装 至此基本安装结束, 重启之后即可进入桌面环境。 xfce4 中文化需要在 ~/.xprofile 里加上： export LANG=zh_CN.UTF-8 export LANGUAGE=zh_CN:en_US ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:1:21","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"常用软件 无需额外配置的软件直接在下面列出, 需要额外配置的在对应的标题下。 Packages aria2 beebeep 局域网通信 bottom 系统监控 chromium dbeaver 数据库管理 dosfstools dosfat 文件系统工具 fping ping 多个主机 geckodriver firefox 驱动 gimp 绘图 gnome-keyring gucharmap 字符查看 hugo 一个 cms inetutils ftp, rlogin, rsh, telnet 客户端和服务端 ipcalc ip 计算器 juk 音乐播放器 kdeconnect 连手机 libreoffice-still libreoffice-still-zh-cn mdcat 终端看 markdown mtr traceroute+ping neofetch 看系统信息 nmap obs-studio 录屏 p7zip 7z php poke 交互式二进制文件编辑器 scrcpy 连安卓手机 sysstat 性能监控工具 tmux 终端复用 tree wget z 智能跳转插件 zellij 终端复用 AUR bruno-bin 接口测试工具 drawio-desktop-bin 绘图 fluent-reader-bin rss 客户端 localsend-bin 局域网传文件 mycli mysql 客户端 python-selenium 网页自动化操作 toolong 查看特别长的文件 wechat-universal-bwrap 微信 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:2:0","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"docker sudo pacman -S docker 加入到 docker 组: sudo usermod -aG docker $USER 使用前需启动 docker 服务。 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:2:1","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"java sudo pacman -S jdk-openjdk jdk17-openjdk jdk11-openjdk jdk8-openjdk 使用 archlinux-java 切换 java 环境。 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:2:2","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"thunderbird 雷鸟邮件客户端。 sudo pacman -S thunderbird thunderbird-i18n-zh-cn systray-x-common qq 邮箱导入时密码要使用授权码。 ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:2:3","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"tldr sudo pacman -S tldr 使用之前更新以下: tldr --update ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:2:4","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"tlp tlp 电源管理 sudo pacman -S tlp tlp-rdw yay -S tlpui sudo systemctl enable tlp.service sudo systemctl enable NetworkManager-dispatcher.service sudo systemctl mask systemd-rfkill.service sudo systemctl mask systemd-rfkill.socket ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:2:5","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"wireshark sudo pacman -S wireshark-qt 加入到 wireshark 组: sudo usermod -aG wireshark $USER ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:2:6","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"虚拟机 virtualbox sudo pacman -S virtualbox virtualbox-guest-iso 选择 virtualbox-host-modules-arch virtualbox-guest-iso 在 /usr/lib/virtualbox/additions/VBoxGuestAdditions.iso 加载模块: sudo modprobe vboxdrv vboxnetadp vboxnetflt 加入到 vboxusers 组: sudo usermod -aG vboxusers $USER vmware sudo pacman -S linux-headers yay vmware-workstation sudo systemctl start vmware-networks-configuration.service sudo systemctl enable vmware-networks.service vmware-usbarbitrator.service sudo modprobe -a vmw_vmci vmmon ","date":"2024-05-18","objectID":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/:2:7","tags":["archlinux"],"title":"Archlinux 安装记录与常用软件","uri":"/archlinux-%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"},{"categories":[],"content":"在 zshparam(1) 中可以看到 zsh 的各种提示符可以通过修改 PROMPT, PROMPT2, PROMPT3, PROMPT4, RPROMPT 等变量的值进行设置, 它们的基本语法相同, 其中 PROMPT 是主要的提示符, 本文也以它为例。 ","date":"2024-01-05","objectID":"/zsh_prompt/:0:0","tags":["zsh"],"title":"zsh 提示符","uri":"/zsh_prompt/"},{"categories":[],"content":"zsh PROMPT 转义字符 zshparam(1) 中关于 PS1 的说明 (zsh 中 PROMPT, prompt, PS1 等价) 指向了 zshmisc(1)。 在 zshmisc(1) 的 SIMPLE PROMPT ESCAPES 一节中可以看到到所有的转义字符，以下列出一些我认为有用的: 登陆信息: %M: 完整的主机名 %n: 用户名 Shell 状态: %#: 特权模式下是一个井号否则是一个百分号 %?: 上一个命令的返回状态 %d 或 %/: 当前目录 %~: 当前目录，若以 $HOME 起始，则将之替换为一个波浪号 %j: 作业数 时间和日期: %D: 年-月-日 %T: 时:分 %*: 时:分:秒 样式: %B (%b): 开始 (结束) 粗体 %F{red} (%f): 开始 (结束) 颜色 条件子串: %(x.true-text.false-text): x 为条件, true-text 为条件为真时显示的内容, false-text 为条件为假时显示的内容。x 有特定的选择, 当 x 为 ? 时，表示上一个命令的返回状态, 默认 0 为真, 其他为假。 ","date":"2024-01-05","objectID":"/zsh_prompt/:1:0","tags":["zsh"],"title":"zsh 提示符","uri":"/zsh_prompt/"},{"categories":[],"content":"git 当前分支名 在 PRO Git 的 Git in Zsh 一节中可以看到一个在右侧显示分支名的实例: autoload -Uz vcs_info precmd_vcs_info() { vcs_info } precmd_functions+=( precmd_vcs_info ) setopt prompt_subst RPROMPT='${vcs_info_msg_0_}' # PROMPT='${vcs_info_msg_0_}%# ' zstyle ':vcs_info:git:*' formats '%b' 在 zstyle ':vcs_info:git:*' formats '%b' 一句中 '%b' 指定了显示的样式，%b 表示分支名。 ","date":"2024-01-05","objectID":"/zsh_prompt/:2:0","tags":["zsh"],"title":"zsh 提示符","uri":"/zsh_prompt/"},{"categories":[],"content":"我的 PROMPT 配置 推荐一个网站 zsh-prompt-generator 用于生成简单的 PROMPT。 首先我希望提示符分为两行，这只需要加一个换行即可: export PROMPT='┌── └' ┌── └ 在第一行中显示当前的时间和当前目录: export PROMPT='┌──(%T)─[%~] └' ┌──(20:00)─[~] └ 在第二行中, 若上一个命令的返回状态不为 0 则显示此返回状态, 否则按照 %# 显示: export PROMPT='┌──(%T)─[%~] └(%(?.%#.%?))─' ┌──(20:00)─[~] └(%)─false ┌──(20:00)─[~] └(1)─ 在第二行显示当前分支名: autoload -Uz vcs_info precmd_vcs_info() { vcs_info } precmd_functions+=( precmd_vcs_info ) setopt prompt_subst zstyle ':vcs_info:git:*' formats '[%b]─' export PROMPT='┌──(%T)─[%~] └(%(?.%#.%?))─${vcs_info_msg_0_}' ┌──(21:27)─[~/git-test] └(%)─[master]─ 最后设置一下颜色: autoload -Uz vcs_info precmd_vcs_info() { vcs_info } precmd_functions+=( precmd_vcs_info ) setopt prompt_subst zstyle ':vcs_info:git:*' formats '%F{10}[%f%b%F{10}]─%f' export PROMPT='%F{10}┌──(%f%F{11}%T%f%F{10})─[%f%F{15}%~%f%F{10}] └(%f%(?.%F{14}%#%f.%F{9}%?%f)%F{10})─%f${vcs_info_msg_0_}' ","date":"2024-01-05","objectID":"/zsh_prompt/:3:0","tags":["zsh"],"title":"zsh 提示符","uri":"/zsh_prompt/"}]
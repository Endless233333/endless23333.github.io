[{"categories":[],"content":"Linux 终端复用器允许用户在单个窗口中创建或启用多个终端, 通常在连接到远程服务器时会使用, 即便链接意外中断, 也可以通过终端复用器的相关功能恢复到之前的工作状态。 本文将简要介绍 screen, tmux 和 zellij 三款终端复用器, 其中 screen 和 tmux 在 ubuntu server 22.04 中自带, 而 zellij 的使用比较方便。 ","date":"2024-04-09","objectID":"/terminal_multiplexer/:0:0","tags":["linux"],"title":"linux 多种终端复用器简介","uri":"/terminal_multiplexer/"},{"categories":[],"content":"screen Screen 是一个全屏窗口管理器, 它在交互式 shell 之间多路传输物理终端。在用户离开它管理的窗口时, 窗口内的程序仍会运行。 创建一个会话可以使用以下三种方式: screen 直接创建并以 linux 的 hostname 命名 screen -S \u003cname\u003e 创建指定名字的会话 screen -R \u003cname\u003e 先尝试进入指定会话, 如果没有创建的话则创建它 创建的会话是可以重名的, 不过它们的 pid 不同, 可以通过这来区分, 建议使用第三种方式创建。 在进入绘画后使用 ctrl-a d 分离会话。 使用 screen -ls 可以查看所有会话的 pid, 名字, 状态。 使用 screen -r [pid/name] 或 screen -R [pid/name] 重新进入会话。 在会话中 exit 或 ctrl-d 终止此会话, 也可以在外面通过 screen -R [pid/name] -X quit 终止。 ","date":"2024-04-09","objectID":"/terminal_multiplexer/:1:0","tags":["linux"],"title":"linux 多种终端复用器简介","uri":"/terminal_multiplexer/"},{"categories":[],"content":"tmux tmux 可以管理多个会话, 一个会话中可以有多个窗口, 一个窗口中可以划分称多个面板。 tmux 中的快捷键都需要先 ctrl-b 才能使用, ctrl+b ? 获取帮助。 使用 tmux 或者 tmux new -s \u003cname\u003e 创建一个新的会话, 后者可以指定名字。 ctrl+b d 或者 tmux detach 分离会话。 tmux ls 列出列出所有会话。 tmux attach -t [id/name] 进入会话。 tmux kill-session -t [id/name] 删除会话。 ","date":"2024-04-09","objectID":"/terminal_multiplexer/:2:0","tags":["linux"],"title":"linux 多种终端复用器简介","uri":"/terminal_multiplexer/"},{"categories":[],"content":"zellij zellij 使用 rust 开发, 默认情况下进入 zellij 后快捷键都会在屏幕下方提示, 所以入门门槛比较低。 直接 zellij 就可以进入 zellij, 使用 ctrl-s d 分离会话。 在会话中 ctrl-o w ctrl-r 重命名会话。 zellij ls 列出所有会话。 zellij a \u003cname\u003e 进入会话。 zellij d \u003cname\u003e 删除会话。 ","date":"2024-04-09","objectID":"/terminal_multiplexer/:3:0","tags":["linux"],"title":"linux 多种终端复用器简介","uri":"/terminal_multiplexer/"},{"categories":[],"content":"本文记录我的 Arch Linux 安装和基础配置的过程, 桌面为 xfce4, boot loader 为 systemd-boot, 文件系统为 ext4, intel cpu + 核显。 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:0:0","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"安装部分 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:0","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"联网 有线网络能自动联网, 无线网络使用 iwctl 进行连接: iwctl device list station wlan0 scan station wlan0 get-networks station wlan0 connect wifi-name exit 可以使用 ping 检查网络连接。 联网之后可以通过 passwd 设置安装环境中 root 的密码, 然后通过其他机器 ssh 去连, 方便复制粘贴。 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:1","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"更新系统时间 使用 timedatectl 确保系统时间是准确的。 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:2","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"硬盘分区与格式 使用 fdisk -l 列出当前分区情况。 分区步骤: fdisk /dev/nvme0n1 n (enter) (enter) +512M n (enter) +16G n (enter) (enter) t 1 1 t 2 19 w 格式化: mkfs.ext4 /dev/nvme0n1p3 mkswap /dev/nvme0n1p2 mkfs.fat -F 32 /dev/nvme0n1p1 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:3","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"挂载 按如下顺序挂载: mount /dev/nvme0n1p3 /mnt mount --mkdir /dev/nvme0n1p1 /mnt/boot swapon /dev/nvme0n1p2 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:4","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"安装系统和必要的功能性软件 pacstrap -K /mnt base linux linux-firmware base-devel networkmanager vim vi sudo openssh zsh intel-ucode ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:5","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"生成 fstab 文件 genfstab -U /mnt \u003e /mnt/etc/fstab ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:6","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"change root 使用 arch-chroot /mnt 把系统环境切换到新系统下。 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:7","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"设置时区 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:8","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"设置主机名 在 /etc/hostname 中写入主机名, 例如 myarch. 在 vim /etc/hosts 中写入以下内容: 127.0.0.1 localhost ::1 localhost 127.0.1.1 myarch.localdomain myarch ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:9","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"硬件时间设置 hwclock --systohc ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:10","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"设置 Locale 编辑 /etc/locale.gen, 去掉 en_US.UTF-8 UTF-8 和 zh_CN.UTF-8 UTF-8 前的井号。 然后使用 locale-gen 生成 locale. echo 'LANG=en_US.UTF-8' \u003e /etc/locale.conf 设定 LANG 变量。 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:11","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"设置 root 用户密码 passwd 然后输两遍密码。 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:12","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"安装引导程序 安装 systemd-boot: bootctl --path=/boot install 编辑 /boot/loader/loader.conf 配置启动选单: default arch.conf timeout 0 console-mode keep editor no 使用 cat /etc/fstab 查看根分区的 UUID. 编辑 /boot/loader/entries/arch.conf 增加启动选项: title Arch Linux linux /vmlinuz-linux initrd /intel-ucode.img initrd /initramfs-linux.img options root=UUID=... rw ibt=off nowatchdog ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:13","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"准备非 root 用户 创建用户: useradd -m -G wheel -s /bin/bash XXX 设置密码: passwd XXX 编辑 sudoers: EDITOR=vim visudo 去掉 #%wheel ALL=(ALL:ALL) ALL 前的井号。 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:14","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"重启 exit umount -R /mnt reboot ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:15","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"联网 systemctl enable --now NetworkManager nmcli device wifi connect 名 password 密 联网后可以通过 systemctl start sshd 开启 ssh 服务。 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:16","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"开启 32 位支持库 编辑 /etc/pacman.conf 去掉 [multilib] 及其下一行前的井号。 pacman -Syyu 更新一下。 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:17","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"一大波安装 pacman -S \\ zsh-autosuggestions zsh-completions zsh-history-substring-search zsh-syntax-highlighting \\ xfce4 xfce4-goodies lightdm lightdm-gtk-greeter gvfs gvfs-mtp udiskie sof-firmware alsa-firmware alsa-ucm-conf pavucontrol pulseaudio pulseaudio-alsa pulseaudio-bluetooth network-manager-applet nm-connection-editor \\ adobe-source-han-serif-cn-fonts wqy-zenhei noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra \\ mesa lib32-mesa vulkan-intel lib32-vulkan-intel \\ blueman bluez bluez-utils \\ fcitx5-im fcitx5-chinese-addons fcitx5-material-color fcitx5-pinyin-zhwiki fcitx5-configtool \\ firefox chromium flameshot okular steam libreoffice-still libreoffice-still-zh-cn man-db man-pages syncthing fd fzf git ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:18","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"yay 安装 使用非 root 用户: git clone https://aur.archlinux.org/yay-bin.git pacman -R yay-bin cd yay-bin makepkg -si 常用软件: yay -S yay-bin clash-verge-rev-bin ttf-intel-one-mono visual-studio-code-bin zsh-theme-powerlevel10k ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:19","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"启动一些服务 systemctl enable lightdm.service bluetooth.service systemd-boot-update.service ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:1:20","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"配置部分 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:2:0","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"fcitx5 编辑 /etc/environment 加入以下内容: GTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx XMODIFIERS=@im=fcitx SDL_IM_MODULE=fcitx GLFW_IM_MODULE=ibus fcitx5 设置: Input Method 加上 pinyin Addons -\u003e Classic User Interface -\u003e Theme -\u003e Material-Color-Red ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:2:1","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"firefox 地址栏输入 about:config, 然后将 browser.newtabpage.activity-stream.improvesearch.handoffToAwesomebar 改成 false. ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:2:2","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"libreoffice tools -\u003e options -\u003e language settings -\u003e user interface 选中文 ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:2:3","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"xfce4 中文化, 在 ~/.xinitrc 或 ~/.xprofile 里加上： export LANG=zh_CN.UTF-8 export LANGUAGE=zh_CN:en_US xfce4 设置: Appearance style: Adwaita-dark icons: elementary fonts: default font: IntelOne Mono Regular dpi: 120 Desktop 桌面 icon: default icon 去掉前三个 Panel panel1-items whisker menu commands 勾上 restart, shut down, suspend window buttons separator network monitor update interval: 0.5 show values as bits present data as: Bars and values system load monitor update interval: 1000 只留下 cpu 和 mem mount devices separator stautus tray plugin pulseaudio plugin notification plugin separator clock clock option: layout: date only font: 12 format: custom format %m-%d clock clock option: layout: time only font: 16 format: 14:38 panel2-items 前两个 launcher 上移一个，中间加各种 launcher Window Manager keyboard Window operations menu 改成 super+space 改下 tile window to the … Xfce Screensaver 时间改成 60 Terminal Appearance 字体: IntelOne Mono Regular 14 background: Transparent Background 0.9 Colors Background Color: 黑色上面那个 Keyboard Application Shortcuts xflock4 super+l flameshot gui shift+super+s xfce4-appfinder 改成 alt+space Power Manager General when power button is pressed: Ask Display 连接电源时拉满 Session and Startup Application Autostart 打开 Clipman 添加 thunar 命令是 thunar –daemon ","date":"2024-02-14","objectID":"/archlinux_install_and_config/:2:4","tags":[],"title":"我的 Arch Linux 安装和基础配置过程","uri":"/archlinux_install_and_config/"},{"categories":[],"content":"在过去, 我经常使用 python -m http.server 用来在局域网中给别人分享一些文件, 所以我打算去翻翻自己电脑上安装的各种 python 包, 找一找能直接通过 python -m 使用的有用的模块。 ","date":"2024-01-06","objectID":"/python_cli/:0:0","tags":["python","linux"],"title":"通过 python -m 直接在命令行中使用 python 模块以实现一些有用的功能","uri":"/python_cli/"},{"categories":[],"content":"python -m 在 python 的文档中可以看到, python -m \u003cmodule-name\u003e 会在 sys.path 中搜索指定模块, 并以 __main__ 模块执行其内容。 以 __main__ 模块执行其内容有两种情况: 如果是单独的 py 文件, 可以通过 __name__ == '__main__', 一般是 if __name__ == '__main__': 如果是一个包, 执行其下的 __main__.py 因此只需要在 sys.path 中找到包含 __main__.py 这个文件的目录或者内容中有 if __name__ == '__main__': 的文件即可。 ","date":"2024-01-06","objectID":"/python_cli/:1:0","tags":["python","linux"],"title":"通过 python -m 直接在命令行中使用 python 模块以实现一些有用的功能","uri":"/python_cli/"},{"categories":[],"content":"寻找 我电脑上的 python 包都在 /usr/lib/python3.11, cd 到此目录。 使用 find . -name \"__main__.py\" 寻找 __main__.py. 使用 rg -l \"if __name__ == '__main__':\" | sort 寻找内容中有 if __name__ == '__main__': 的文件。 ","date":"2024-01-06","objectID":"/python_cli/:2:0","tags":["python","linux"],"title":"通过 python -m 直接在命令行中使用 python 模块以实现一些有用的功能","uri":"/python_cli/"},{"categories":[],"content":"筛选与使用 /usr/lib/python3.11 下的 site-packages 存放第三方模块。 一般可以通过 python -m xxx -h 或 python -m xxx --help 获取帮助信息。 ","date":"2024-01-06","objectID":"/python_cli/:3:0","tags":["python","linux"],"title":"通过 python -m 直接在命令行中使用 python 模块以实现一些有用的功能","uri":"/python_cli/"},{"categories":[],"content":"标准库 ast 解析源代码成抽象语法树, 例如: \u003e echo \"print('hello')\" | python -m ast Module( body=[ Expr( value=Call( func=Name(id='print', ctx=Load()), args=[ Constant(value='hello')], keywords=[]))], type_ignores=[]) base64 用于 base64 编解码, 例如: \u003e echo -n \"hello\" | python -m base64 aGVsbG8= \u003e echo -n \"aGVsbG8=\" | python -m base64 -d hello% 由于 coreutils 里就有 base64, 所以直接在命令行使用这个模块意义不大。 compileall 可以将 .py 编译为 .pyc, 例如: python -m compileall .. 默认 .pyc 会放在 __pycache__ 目录下。 cProfile 性能分析, 例如: python -m cProfile -m base64 ./1.txt. curses 用于创建 TUI 的模块。 python -m curses.has_key 检查 has_key. python -m curses.textpad 打开一个简单的写字板。 ensurepip 用于确保安装了 pip, 没什么用。 gzip 例如: python -m gzip --best ./test.mp4 http.server 起一个简单的 http 服务。 imghdr 确认图像类型, 例如: \u003e python -m imghdr ./Pictures/7.png ./Pictures/7.png: png json.tool 校验并打印好看的 json, 例如: python -m json.tool ~/data.json. lib2to3 用于将 python2 代码转化成 python3 代码, 可以直接 2to3 而不用 python -m lib2to3, 也没什么用。 mimetypes 显示文件的 mime 类型, 例如: \u003e python -m mimetypes 1.sh type: application/x-sh encoding: None pdb python debugger, 用法: python -m pdb your_script.py. platform 获取平台信息: \u003e python -m platform Linux-6.6.9-arch1-1-x86_64-with-glibc2.38 profile 性能分析, 例如: \u003e python -m profile 1.py hello 5 function calls in 0.013 seconds Ordered by: standard name ncalls tottime percall cumtime percall filename:lineno(function) 1 0.000 0.000 0.000 0.000 1.py:1(\u003cmodule\u003e) 1 0.000 0.000 0.000 0.000 :0(exec) 1 0.000 0.000 0.000 0.000 :0(print) 1 0.013 0.013 0.013 0.013 :0(setprofile) 1 0.000 0.000 0.013 0.013 profile:0(\u003ccode object \u003cmodule\u003e at 0x7f373a01e5d0, file \"1.py\", line 1\u003e) 0 0.000 0.000 profile:0(profiler) 选项 -o 可以保存分析结果到指定文件。 pstats 处理和显示 profile 的结果, 例如: \u003e python -m pstats test Welcome to the profile statistics browser. test% pydoc python 文档工具。 quopri python -m quopri xxx 对 xxx 进行 Quoted-Printable 编码, 选项 -d 解码。 random python -m random 测试产生随机数。 shlex 分词, 例如: \u003e echo -n \"print('hello')\" | python -m shlex Token: 'print' Token: '(' Token: \"'hello'\" Token: ')' site python -m site 打印 sys.path 等信息。 sysconfig python -m sysconfig 打印配置信息。 tabnanny 检查缩进, 例如: \u003e python -m tabnanny -v 1.py '1.py': Clean bill of health. tarfile 创建和解压 tar 文件, 例如: \u003e touch 1 \u003e ls 1 \u003e python -m tarfile -c 1.tar ./1 \u003e ls 1 1.tar \u003e python -m tarfile -l 1.tar ./1 \u003e python -m tarfile -t 1.tar [\u003cTarInfo './1' at 0x7f9cc5ae5cc0\u003e] \u003e rm 1 \u003e ls 1.tar \u003e python -m tarfile -e 1.tar \u003e ls 1 1.tar tkinter 用于创建 GUI 的模块, 直接 python -m tkinter 的话会有一个简单的小窗口。 turtledemo 正如它的名字一样, 直接使用会出现 turtle 的 demo. unittest 用于在命令行中直接运行单元测试。 uu 进行 uu 编码和解码。 venv 创建虚拟环境: python -m venv aaa 激活虚拟环境: source aaa/bin/activate 退除虚拟环境: deactivate xmlrpc.server python -m xmlrpc.server 起一个简单的 xmlrpc 服务。 zipapp 创建和执行 pyz. 创建: python -m zipapp -o 1.pyz -m \"myapp:main\" ./app 执行: python 1.pyz 在已存在 __main__.py 的目录中不可以使用 -m 选项指定入口点。 ","date":"2024-01-06","objectID":"/python_cli/:3:1","tags":["python","linux"],"title":"通过 python -m 直接在命令行中使用 python 模块以实现一些有用的功能","uri":"/python_cli/"},{"categories":[],"content":"在 zshparam(1) 中可以看到 zsh 的各种提示符可以通过修改 PROMPT, PROMPT2, PROMPT3, PROMPT4, RPROMPT 等变量的值进行设置, 它们的基本语法相同, 其中 PROMPT 是主要的提示符, 本文也以它为例。 ","date":"2024-01-05","objectID":"/zsh_prompt/:0:0","tags":["zsh"],"title":"zsh 提示符","uri":"/zsh_prompt/"},{"categories":[],"content":"zsh PROMPT 转义字符 zshparam(1) 中关于 PS1 的说明 (zsh 中 PROMPT, prompt, PS1 等价) 指向了 zshmisc(1)。 在 zshmisc(1) 的 SIMPLE PROMPT ESCAPES 一节中可以看到到所有的转义字符，以下列出一些我认为有用的: 登陆信息: %M: 完整的主机名 %n: 用户名 Shell 状态: %#: 特权模式下是一个井号否则是一个百分号 %?: 上一个命令的返回状态 %d 或 %/: 当前目录 %~: 当前目录，若以 $HOME 起始，则将之替换为一个波浪号 %j: 作业数 时间和日期: %D: 年-月-日 %T: 时:分 %*: 时:分:秒 样式: %B (%b): 开始 (结束) 粗体 %F{red} (%f): 开始 (结束) 颜色 条件子串: %(x.true-text.false-text): x 为条件, true-text 为条件为真时显示的内容, false-text 为条件为假时显示的内容。x 有特定的选择, 当 x 为 ? 时，表示上一个命令的返回状态, 默认 0 为真, 其他为假。 ","date":"2024-01-05","objectID":"/zsh_prompt/:1:0","tags":["zsh"],"title":"zsh 提示符","uri":"/zsh_prompt/"},{"categories":[],"content":"git 当前分支名 在 PRO Git 的 Git in Zsh 一节中可以看到一个在右侧显示分支名的实例: autoload -Uz vcs_info precmd_vcs_info() { vcs_info } precmd_functions+=( precmd_vcs_info ) setopt prompt_subst RPROMPT='${vcs_info_msg_0_}' # PROMPT='${vcs_info_msg_0_}%# ' zstyle ':vcs_info:git:*' formats '%b' 在 zstyle ':vcs_info:git:*' formats '%b' 一句中 '%b' 指定了显示的样式，%b 表示分支名。 ","date":"2024-01-05","objectID":"/zsh_prompt/:2:0","tags":["zsh"],"title":"zsh 提示符","uri":"/zsh_prompt/"},{"categories":[],"content":"我的 PROMPT 配置 推荐一个网站 zsh-prompt-generator 用于生成简单的 PROMPT。 首先我希望提示符分为两行，这只需要加一个换行即可: export PROMPT='┌── └' ┌── └ 在第一行中显示当前的时间和当前目录: export PROMPT='┌──(%T)─[%~] └' ┌──(20:00)─[~] └ 在第二行中, 若上一个命令的返回状态不为 0 则显示此返回状态, 否则按照 %# 显示: export PROMPT='┌──(%T)─[%~] └(%(?.%#.%?))─' ┌──(20:00)─[~] └(%)─false ┌──(20:00)─[~] └(1)─ 在第二行显示当前分支名: autoload -Uz vcs_info precmd_vcs_info() { vcs_info } precmd_functions+=( precmd_vcs_info ) setopt prompt_subst zstyle ':vcs_info:git:*' formats '[%b]─' export PROMPT='┌──(%T)─[%~] └(%(?.%#.%?))─${vcs_info_msg_0_}' ┌──(21:27)─[~/git-test] └(%)─[master]─ 最后设置一下颜色: autoload -Uz vcs_info precmd_vcs_info() { vcs_info } precmd_functions+=( precmd_vcs_info ) setopt prompt_subst zstyle ':vcs_info:git:*' formats '%F{10}[%f%b%F{10}]─%f' export PROMPT='%F{10}┌──(%f%F{11}%T%f%F{10})─[%f%F{15}%~%f%F{10}] └(%f%(?.%F{14}%#%f.%F{9}%?%f)%F{10})─%f${vcs_info_msg_0_}' ","date":"2024-01-05","objectID":"/zsh_prompt/:3:0","tags":["zsh"],"title":"zsh 提示符","uri":"/zsh_prompt/"}]